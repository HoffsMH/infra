#!/bin/bash

# declare an associative array
declare -A file_dates

# get the total file count for progress tracking
total_files=$(git ls-tree -r master --name-only | wc -l)

# initialize a counter for processed files
processed_files=0

# process each file
for file in $(git ls-tree -r master --name-only); do
    # get the date of the first commit, convert it to Unix timestamp and store it in the array
    file_dates["$file"]=$(date -d "$(git log --follow --format=%aD --diff-filter=A -- $file | tail -1)" +%s)

    # increment the counter and print the progress to stderr
    let processed_files++
    echo "Processed $processed_files out of $total_files files..." >&2

done

echo "All files processed. Sorting and printing the results..." >&2

# print the files with their dates, sorted by date
for timestamp in $(printf "%s\n" "${file_dates[@]}" | sort -n); do
    # retrieve file by timestamp
    for file in "${!file_dates[@]}"; do
        if [[ "${file_dates[$file]}" -eq "$timestamp" ]]; then
            echo $(date -d "@$timestamp" -R) $file
            # remove it from the array so it doesn't get processed again
            unset file_dates["$file"]
            break
        fi
    done
done
